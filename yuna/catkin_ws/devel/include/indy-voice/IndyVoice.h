// Generated by gencpp from file indy-voice/IndyVoice.msg
// DO NOT EDIT!


#ifndef INDY-VOICE_MESSAGE_INDYVOICE_H
#define INDY-VOICE_MESSAGE_INDYVOICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace indy-voice
{
template <class ContainerAllocator>
struct IndyVoice_
{
  typedef IndyVoice_<ContainerAllocator> Type;

  IndyVoice_()
    : data()
    , moving(0)  {
      data.assign(0);
  }
  IndyVoice_(const ContainerAllocator& _alloc)
    : data()
    , moving(0)  {
  (void)_alloc;
      data.assign(0);
  }



   typedef boost::array<int16_t, 8>  _data_type;
  _data_type data;

   typedef int16_t _moving_type;
  _moving_type moving;





  typedef boost::shared_ptr< ::indy-voice::IndyVoice_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::indy-voice::IndyVoice_<ContainerAllocator> const> ConstPtr;

}; // struct IndyVoice_

typedef ::indy-voice::IndyVoice_<std::allocator<void> > IndyVoice;

typedef boost::shared_ptr< ::indy-voice::IndyVoice > IndyVoicePtr;
typedef boost::shared_ptr< ::indy-voice::IndyVoice const> IndyVoiceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::indy-voice::IndyVoice_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::indy-voice::IndyVoice_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::indy-voice::IndyVoice_<ContainerAllocator1> & lhs, const ::indy-voice::IndyVoice_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.moving == rhs.moving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::indy-voice::IndyVoice_<ContainerAllocator1> & lhs, const ::indy-voice::IndyVoice_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace indy-voice

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::indy-voice::IndyVoice_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::indy-voice::IndyVoice_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::indy-voice::IndyVoice_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::indy-voice::IndyVoice_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::indy-voice::IndyVoice_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::indy-voice::IndyVoice_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::indy-voice::IndyVoice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "926d498bb3e9f898f2a3ff6ed5aff58c";
  }

  static const char* value(const ::indy-voice::IndyVoice_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x926d498bb3e9f898ULL;
  static const uint64_t static_value2 = 0xf2a3ff6ed5aff58cULL;
};

template<class ContainerAllocator>
struct DataType< ::indy-voice::IndyVoice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "indy-voice/IndyVoice";
  }

  static const char* value(const ::indy-voice::IndyVoice_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::indy-voice::IndyVoice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[8] data\n"
"int16 moving\n"
;
  }

  static const char* value(const ::indy-voice::IndyVoice_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::indy-voice::IndyVoice_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IndyVoice_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::indy-voice::IndyVoice_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::indy-voice::IndyVoice_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "moving: ";
    Printer<int16_t>::stream(s, indent + "  ", v.moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDY-VOICE_MESSAGE_INDYVOICE_H
